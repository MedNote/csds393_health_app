type RootQueryType {
  record_by_id(uuid: ID): MedNote

  record_by_uuid(uuid: String): MedNote

  record_after_date(uuid: String, date: DateTime): MedNote

  get_key_for_uuid(uuid: String): SymmetricKey
}

type MedNote {
  uuid: String

  name: name

  dob: String

  allergies: [String]

  medications: [String]

  immunizations: [immunization]

  visit_notes: [note]
}

type SymmetricKey {
  uuid: String

  symmetric_key: String
}

type name {
  first_name: String

  last_name: String
}

type immunization {
  immunization: String

  date: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type note {
  note: String

  date: DateTime
}

type Mutation {
  addRecord(uuid: String, name: nameIn, dob: String, allergies: [String], medications: [String], immunizations: [immunizationIn], visit_notes: [noteIn]): MedNote

  updateRecord(uuid: String, name: nameIn, dob: String, allergies: [String], medications: [String], immunizations: [immunizationIn], visit_notes: [noteIn]): MedNote

  appendRecord(uuid: String, name: nameIn, dob: String, allergies: [String], medications: [String], immunizations: [immunizationIn], visit_notes: [noteIn]): MedNote

  add_key_for_uuid(uuid: String, symmetric_key: String): SymmetricKey

  set_key_for_uuid(uuid: String, symmetric_key: String): SymmetricKey
}

input nameIn {
  first_name: String

  last_name: String
}

input immunizationIn {
  immunization: String

  date: DateTime
}


input noteIn {
  note: String

  date: DateTime
}

schema {
  query: RootQueryType
  mutation: Mutation
}
